*Vizardry*
                ________________ _______ _______ ______  _______
        |\     /\__   __/ ___   (  ___  (  ____ (  __  \(  ____ |\     /|
        | )   ( |  ) (  \/   )  | (   ) | (    )| (  \  | (    )( \   / )
        | |   | |  | |      /   | (___) | (____)| |   ) | (____)|\ (_) /
        ( (   ) )  | |     /   /|  ___  |     __| |   | |     __) \   /
         \ \_/ /   | |    /   / | (   ) | (\ (  | |   ) | (\ (     ) (
          \   / ___) (___/   (_/| )   ( | ) \ \_| (__/  | ) \ \__  | |
           \_/  \_______(_______|/     \|/   \__(______/|/   \__/  \_/

                    A vim plugin manager for lazy people

===============================================================================
Table of Contents                                         *Vizardry-contents* ~

    1. Release notes...............................|Vizardry-releaseNotes|
    2. Introduction................................|Vizardry-introduction|
        2.1 Why This Fork..........................|Vizardry-fork|
        2.2. Requirements..........................|Vizardry-requirements|
        2.3. Installation..........................|Vizardry-installation|
        2.4. License...............................|Vizardry-License|
    4. Submodules..................................|Vizardry-submodule|
    5. Commands....................................|Vizardry-commands|
        5.1 Scry...................................|:Scry|
            5.1.1 Nb results.......................|Vizardry-nbScryResults|
            5.1.2 Query............................|Vizardry-query|
            5.1.3 Search Options...................|Vizardry-searchOptions|
            5.1.4 Sort results.....................|Vizardry-sortScryResults|
        5.2 Invoke.................................|:Invoke|
            5.2.1 Readme Reader....................|Vizardry-readmeReader|
        5.3 Banish.................................|:Banish|
        5.4 Unbanish...............................|:Unbanish|
        5.5 Vanish.................................|:Vanish|
        5.6 Evolve.................................|:Evolve|
            5.6.1 View readme on evolve............|Vizardry-viewReadmeOnEvolve|
            5.6.2 Evolve from vim.org..............|Vizardry-evolveVim.org|

===============================================================================
Release notes                                         *Vizardry-releaseNotes* ~

Current Version: 1.3.2

* v1.3 allow to Invoke directly from Scry, to do so, I had to modify the input
  method (using `:input()`, instead of `:getchar()`), for the user the result
  is that it is now necessary to hit 'enter' after answering a prompt from
  Vizardry
* Since v1.1, `VizardrySortScryResults` is replaced by `VizardrySearchOptions`

===============================================================================
Intoduction                                           *Vizardry-introduction* ~

Remember back in the dark ages of 2013? When you had to search for vim plugins
like a wild animal, using your browser?

In 2014, you can just type "|:Invoke| <keyword>" and Vizardry will
automatically search github for the plugin you want and install it for you.

In 2015 you can even upgrade plugins from any git repo or vim.org using
|:Evolve| |Vizardry-Upgrade|.

Why this fork ?                                                 *Vizardry-fork*

    This plugin is a fork from Ardagnir original Vizardry plugin
    (https://github.com/ardagnir/Vizardry) which adds several pretty cool
    features including:

    + |:Vanish| command to actually remove a plugin.
    + |:Evolve| command to upgrade one or every plugins.
    + Complete submodule handling for people having their vim config in a git repo
    (see |Vizardry-submodules|).
    + Display README.md file inside vim while using |:Invoke|
    + Navigate through search results with |:Invoke|
    + Search for plugins written by a specific user
    + Set the length of |:Scry| results list.
    + Go directly from |:Scry| to |:Invoke|
    + Automatically call |:Helptags| every time a plugin is Invoked.

Requirements                                            *Vizardry-requirements*

    + Vizardry requires |pathogen| https://github.com/tpope/vim-pathogen. But
    you already have pathogen installed, don't you?

    + It also needs curl, as well as commandline programs that come with most
    \*nix systems.

    + Optional: atool http://freecode.com/projects/atool is required for
    upgrading scripts from vim.org (although it is preferable to use vim.org
    github repositories).

    + You will probably have issues if you use a Windows OS.

Installation                                            *Vizardry-Installation*

    Use pathogen.
>
        cd ~/.vim/bundle
        git clone https://github.com/dbeniamine/vizardry
<
License                                                      *Vizardry-License*

    Vizardry is licensed under the AGPL v3
    Author: David Beniamine

===============================================================================
How to use Vizardry with submodules ?                  *Vizardry-submodules* ~

Set the following variables in your vimrc:
>
    let g:VizardryGitMethod="submodule add"
    let g:VizardryGitBaseDir="/path/to/your/git/repo"
<

The second variable ** must be** the root of the repo containing your vim
files.

Optionally you can set the vim commit messages (the name of the modified
plugin will always be happened in the end of the message, the proposed values
are the defaults):

>
    let g:VizardryCommitMsgs={'Invoke': "[Vizardry] Invoked vim submodule:",
          \'Banish': "[Vizardry] Banished vim submodule:",
          \'Vanish': "[Vizardry] Vanished vim submodule:",
          \'Evolve': "[Vizardry] Evolved vim submodule:",
          \}

<

Each time you |:Invoke|, |:Bannish| or |:Vanish| a module, the submodule will
be correctly updated and a minimal commit will be created.

Notes:

+ Commits created by Vizardry are not automatically pushed.
+ The `.gitmodule` file is included in each commit, do not use |:Invoke|,
|:Bannish| or |:Vanish| if it contains some bad modifications.

===============================================================================
Vizardry Commands                                         *Vizardry-commands* ~


:Scry [<query>]                                                         *:Scry*


    + If no <query> is given, list all invoked and banished plugins.
    + If a <query> is specified (see |Vizardry-query|), search github for a
    script matching <query> in title or readme and list N first results.
    After the search, Ì€`Scry` will prompt you to `Invoke` a script, hit `q` to
    exit, or a number to `Invoke` the corresponding script.


    The number of results displayed can be configured by adding the following
    to your vimrc:
                                                       *Vizardry-nbScryResults*
>
        let g:VizardryNbScryResults = 25
<
    Default is 10.

    A <query> can be:                                          *Vizardry-query*
        + One or several <keywords>
        + A query matching the github search api (see
          https://developer.github.com/v3/search/#search-repositories)
        + -u <user> (search every repositories of <user> matching 'vim'
        + One or several <keywords> and -u <user> (in any order)

                                                       *Vizardry-searchOptions*
    It is possible to set some github search option in your vimrc, default
    options are show forked repositories and sort by pertinence. These options
    can be overwritten. For instance adding the following to your vimrc will
    make vizardry show results sorted by number of stars hidding forked
    repositries.

        let g:VizardrySearchOptions="fork:false+sort:stars"

    Any combination of github option can be used, a `+` must appear between
    each options. For the sort option, available parameters are `stars`,
    `forks`, `updated`, by default, it show the best match.

                                                     *Vizardry-sortScryResults*

    Since v1.1, `VizardrySortScryResults` is replaced by |VizardrySearchOptions|


:Invoke [<query>|N]                                                   *:Invoke*

        + If no arguments is specified, reload your plugins.
        + If the argument is a number, ask to install the plugin with that
            number from the last |:Scry| or Invoke.
        + If the argument is a <query>, search github for a plugin matching
        <query> (see |Vizardry-query|)  and ask for install, the sort criteria
        for search results can be configured see |Vizardry-sortSearchResults|.

    Suppose you're in the middle of vimming and you have a sudden need to surround
    random words in "scare quotes". You can't remember who made the surround
    plugin, or whether it's called surround.vim, vim-surround or
    vim-surround-plugin. Most importantly, you're lazy.

    Just type:

>
        :Invoke surround
<
    Vizardry will pop up a prompt saying:
>
        Result 1/20 tpope/vim-surround
        (surround.vim: quoting/parenthesizing made simple)

        Clone as "surround"? (Yes/Rename/DisplayMore/Next/Previous/Abort)
<
    Press Y and you can immediately start surrounding things.  You can also
    take a look at the README.md directly in vim by hitting 'd', Go to the
    next or previous script with 'n' and 'p' or abort 'a'. It's that easy.

                                                        *Vizardry-readmeReader*
    To view the readme, an other instance of vim is called, the command line
    can be configured:
>
        let g:VizardryReadmeReader='view -c "set ft=markdown" -'
<

    Even plugins with vague or silly names can be found with Vizardry. Imagine
    you're running multiple instances of vim and need a package to sync
    registers. Type:
>
        :Invoke sync registers
<
    Vizardry will prompt you with:
>
        Result 1/3 ardagnir/united-front
        (Automatically syncs registers between vim instances)

        Clone as "syncregisters"? (Yes/Rename/DisplayMore/Next/Previous/Abort)
<
    Just as easy.

:Banish <keyword>                                                     *:Banish*

    Banish a plugin, this only forbid pathogen to load it and does not remove
    the files. You need to restart vim to see the effects.

:Unbanish <keyword>                                                 *:Unbanish*

    Reverse a banish.

:Vanish <keyword>                                                     *:Vanish*

        Remove definitively a plugin's files.

:Evolve  [<keyword>]                                                  *:Evolve*

    Upgrade the plugin matching <keyword>. If no <keyword> is given, upgrade
    all possible plugins.

The plugins downloaded from github are upgraded by doing:
>
        git pull origin master
<
                                                  *Vizardry-viewReadmeOnEvolve*
    Sometimes it can be a good idea to take a quick look at a plugin's README
    or git log when updating, to do so, add the following to your vimrc:
>
        let g:VizardryViewReadmeOnEvolve=1
<

    `:Evolve` will then ask you to display readme or log each time a plugin is
    upgraded.

                                                       *Vizardry-evolveVim.org*
    Although the following method works fine, it is recommended to always install
    plugins by cloning a repository. To install plugin found at vim.org by from
    github use:
>
        :Invoke -u vim-scripts <plugin-name>
<
    Were <plugin-name> is the actual name of the plugin at vim.org

    You can also search a plugin by vim.org id:
>
        :Invoke -u vim-scripts in:readme script_id=<id>
<

    |:Evolve| is able to upgrade plugin downloaded from vim.org, to do so, you
    need to create a `.metainfos` file at the root of the plugin directory (not
    yout bundle directory). Such a file is composed of two lines:

        1. the vimscript url (at vim.org)
        2. The current version number (0 for initialization)

    Note: `atool` is required for upgrading scripts from vim.org, (see
    |Vizardry-Requirements|).
